--Serv Script
-- Hello to the one who is going to do the test already I want to thank this person that god bless him,
--Speaking of my game I created a homing missile system that uses as request physics, cframe, and metatble with 
--raycast etc, this system will make sure to fire a missile that will then follow the player in question, the player 
--has a parry by pressing F which will allow him to send the missile back to another person (player) not npc. We first
--have a GameManager which will allow to manage all the loop core, and then we have the Missile and parade modules, Missile 
--will manage all the functions that the missile uses of course with setmetatble, and then parad which will manage to 
--create the init function to connect the event and then listen, here is a little debrief and I hope that it will be enough 
--(estimated time 5 hours of work) without copy paste or cheating or ia etc,(just me and my brain) I hope you enjoy this system !
-- and run 2 players and test it, I haven't adjusted for NPCs yet




local GameManager = require(game.ReplicatedStorage.Module.GameManager)
local Players = game:GetService("Players")
local ParaModule = require(game.ReplicatedStorage.Module.ParadeManager)

local LAUNCH_POINT = workspace.StartPoin 
local DETECTION_RADIUS = 30
local COOLDOWN = 5 
local playerCooldowns = {}

ParaModule:Init()
while true do
	task.wait(0.5) 

	for _, player in pairs(Players:GetPlayers()) do
		if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then

			local distance = (player.Character.HumanoidRootPart.Position - LAUNCH_POINT.Position).Magnitude

			if distance < DETECTION_RADIUS then
				
				if not playerCooldowns[player] or os.clock() - playerCooldowns[player] > COOLDOWN then
					playerCooldowns[player] = os.clock() 
					GameManager.LaunchMissile(player, LAUNCH_POINT,true)
				end
			end
		end
	end
end



--Game Manager Module

local GameManager = {}

local Missile = require(game.ReplicatedStorage.Module.Missile)
local RunService = game:GetService("RunService")

local activeMissiles = {}


RunService.Heartbeat:Connect(function(dt)
	
	for i = #activeMissiles, 1, -1 do
		local missile = activeMissiles[i]


		if not missile.Part then
			table.remove(activeMissiles, i)
		else
			missile:Update(dt)
		end
	end
end)


function GameManager.LaunchMissile(cible, pointDeLancement,V2)
	print("Lancement d'un missile sur " .. cible.Name)
	if V2 then
		local newMissile = Missile.MissileV2.new(cible, pointDeLancement)
		table.insert(activeMissiles, newMissile)
		return
	end
	local newMissile = Missile.Missile.new(cible, pointDeLancement)
	table.insert(activeMissiles, newMissile)
end
function GameManager:Getmissile()
	return activeMissiles
end

return GameManager
-- Missile Manager

local Missile = {}
Missile.__index = Missile

local RunService = game:GetService("RunService")


function Missile.new(cible, pointDeLancement)
	local self = setmetatable({}, Missile)

	self.Cible = cible
	self.Vitesse = 1
	self.TurnSpeed = 0.2 
	self.Timeout = 10 

	local part = Instance.new("Part")
	part.Name = "Missile"
	part.Parent = workspace
	part.Position = pointDeLancement.Position
	part.CFrame = CFrame.lookAt(part.Position, cible.Character:FindFirstChild("HumanoidRootPart").Position)
	part.Anchored = true
	part.CanCollide = false
	part.Size = Vector3.new(1, 1, 3) -- s
	part.BrickColor = BrickColor.new("Bright red")
	part.Material = Enum.Material.Neon
	
	local trail = Instance.new("Trail")
	trail.Parent = part
	trail.Enabled = true
	trail.Color = ColorSequence.new(Color3.new(1, 0, 0))
	trail.Attachment0 = Instance.new("Attachment", part)
	trail.Attachment1 = Instance.new("Attachment", part)
	trail.Lifetime = 0.1
	trail.MinLength = 0.1
	trail.FaceCamera = true
	trail.LightEmission = 1
	trail.LightInfluence = 0
	trail.WidthScale = NumberSequence.new(1, 0)
	trail.Transparency = NumberSequence.new(0, 1)

	

	self.Part = part
	self.StartTime = os.clock()
	self.Connection = nil -- 
	self.CooldwonDamage = false

		
	return self
end

-- La fonction de mise à jour, appelée à chaque frame
function Missile:Update(dt)
	-- Sécurité : si la cible n'existe plus ou est morte, on s'arrête
	if not self.Cible or not self.Cible.Parent or self.Cible.Character:FindFirstChild("Humanoid").Health   <= 0 then
		self:Destroy()
		return
	end

	
	if os.clock() - self.StartTime > self.Timeout then
		self:Destroy()
		return
	end

	local hrp = self.Cible.Character:FindFirstChild("HumanoidRootPart") or self.Cible:FindFirstChild("HumanoidRootPart")
	if not hrp then self:Destroy() return end

local goalOrientation = CFrame.lookAt(self.Part.Position, hrp.Position)
	self.Part.CFrame = self.Part.CFrame:Lerp(goalOrientation, self.TurnSpeed)

	
	
	
	local mouvement = self.Part.CFrame.LookVector * self.Vitesse * (dt * 60) 
	self.Part.CFrame = self.Part.CFrame + mouvement
	
	local raycast = workspace:Raycast(self.Part.Position,self.Part.CFrame.LookVector * 20)
	
	if raycast then
		local hum = raycast.Instance.Parent:FindFirstChild("Humanoid")
		if hum and 	self.CooldwonDamage == false then
			self.CooldwonDamage = true
			hum:TakeDamage(10) -- Normaly the missil one shot/and destroy immediatly but for the test i create that for you ! 
			wait(1)
			self.CooldwonDamage = false
		end
	end
end


function Missile:Explode()
	local expl = Instance.new("Explosion")
	expl.Parent = workspace
	expl.Position = self.Part.Position
	expl.BlastRadius = 10
	expl.BlastPressure = 100000

	self:Destroy()
end


function Missile:Destroy()
	if self.Connection then
		self.Connection:Disconnect() 
		self.Connection = nil
	end
	if self.Part then
		self.Part:Destroy()
		self.Part = nil
	end
end


local MissileV2 = {}
MissileV2.__index = MissileV2

setmetatable(MissileV2,Missile)

function MissileV2.new(cible, pointDeLancement)
	local self = setmetatable(Missile.new(cible, pointDeLancement), MissileV2)
	
	self.Part.Size = Vector3.new(4, 4, 3) 
	self.Vitesse = 0.5
	return self
end


return {Missile = Missile,MissileV2 = MissileV2}
-- Parad Manager 
local ParadeManager = {}

local remoteEvent = game.ReplicatedStorage.RemotesEvent:FindFirstChild("Parade")
local GameManager = require(game.ReplicatedStorage.Module.GameManager)
function ParadeManager:Init()
	remoteEvent.OnServerEvent:Connect(function(player)
	
	local newattaq  = nil
		for _,value in pairs(game.Players:GetPlayers()) do
			if value ~= player then
				newattaq = value
			end
		end
	if newattaq then
	
		local Allmisive = GameManager:Getmissile()
		print(Allmisive)
		for i, missile in pairs(Allmisive) do
			if missile.Cible.Name == player.Name  then
				print("s")
				local distance = (missile.Part.Position - player.Character.HumanoidRootPart.Position).Magnitude
				if distance < 10 then
					print("ss")
					missile.Cible = newattaq
	
				end
			end
		end
	end

	end)
end

function ParadeManager:Parade()
	
	
	
end


return ParadeManager
-- Local script 
local remotFolder = game.ReplicatedStorage.RemotesEvent
local uis  = game:GetService("UserInputService")
local player = game.Players.LocalPlayer

uis.InputBegan:Connect(function(key)
	if key.KeyCode == Enum.KeyCode.F then

		remotFolder.Parade:FireServer()
	end
end)
